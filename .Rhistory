openair::mydata
openair::mydata$date %>% diff()
library(dplyr)
openair::mydata$date %>% diff()
as.numeric(openair::mydata$date) %>% diff()
temp = openair::mydata
temp$date %>% class()
?tibble()
View(tibble)
View(tibble_quos)
tibble:::tibble_quos
View(tibble:::tibble_quos)
usethis::use_test()
usethis::use_testthat()
library(usethis)
use_r()
use_test()
successful_pad = data.frame(
date = seq(from = as.POSIXct("1970-01-01 00:00", format = "%Y-%m-%d %H:%M"),
to = as.POSIXct("1970-01-01 23:00", format = "%Y-%m-%d %H:%M"),
by = 3600
)
)
successful_pad
successful_pad = data.frame(
date = seq(from = as.POSIXct("1970-01-01 00:00", format = "%Y-%m-%d %H:%M"),
to = as.POSIXct("1970-01-01 23:00", format = "%Y-%m-%d %H:%M"),
by = 3600
)
) %>%
dplyr::tibble()
successful_pad
successful_pad = data.frame(
date = seq(from = as.POSIXct("1970-01-01 00:00", format = "%Y-%m-%d %H:%M"),
to = as.POSIXct("1970-01-01 23:00", format = "%Y-%m-%d %H:%M"),
by = 3600
)
)
successful_pad
library(testthat)
expect_equal(2 * 2, 4)
test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
test_that("multiplication works", {
expect_equal(2 * 2, 4.1)
})
test_that("multiplication works", {
expect_equal(2 * 2, 4.00000000000000000001)
})
test_that("multiplication works", {
expect_equal(2 * 2, 4.001)
})
expect_equal(2 * 2, 4.0001)
expect_equal(2 * 2, 4.00001)
expect_equal(2 * 2, 4.0000001)
expect_equal(2 * 2, 4.0000000001)
test_that("multiplication works", {
expect_equal(2 * 2, 4.0000000001)
})
expect_equal(2 * 2, 4.000000001)
test_that("multiplication works", {
expect_equal(2 * 2, 4.000000001)
})
test_that("multiplication works", {
expect_equal(2 * 2, 4.00000001)
})
expect_equal(2 * 2, 4.0000001)
unique_gaps = temp$date %>%
na.omit() %>%
as.numeric() %>%
dplyr::diff()
unique_gaps = temp$date %>%
na.omit() %>%
as.numeric() %>%
diff()
unique_gaps
unique_gaps = temp$date %>%
na.omit() %>%
as.numeric() %>%
diff() %>%
count()
unique_gaps = tibble(
diffs = temp$date %>%
na.omit() %>%
as.numeric() %>%
diff())
unique_gaps
unique_gaps = tibble(
diffs = temp$date %>%
na.omit() %>%
as.numeric() %>%
diff()) %>%
dplyr::count()
unique_gaps
temp$date[100] = NA
unique_gaps = tibble(
diffs = temp$date %>%
na.omit() %>%
as.numeric() %>%
diff()) %>%
dplyr::count()
unique_gaps
tibble(
diffs = temp$date %>%
na.omit() %>%
as.numeric() %>%
diff())
tibble(
diffs = temp$date %>%
na.omit() %>%
as.numeric() %>%
diff()) %>% .$diffs %>% plot()
unique_gaps = tibble(
diffs = temp$date %>%
na.omit() %>%
as.numeric() %>%
diff()) %>%
dplyr::tally()
unique_gaps
?table
unique_gaps = tibble(
diffs = temp$date %>%
na.omit() %>%
as.numeric() %>%
diff()) %>%
table()
unique_gaps
unique_gaps = tibble(
diffs = temp$date %>%
na.omit() %>%
as.numeric() %>%
diff()) %>%
group_by(diffs) %>%
count()
unique_gaps
unique_gaps = tibble(
diffs = temp$date %>%
na.omit() %>%
as.numeric() %>%
diff()) %>%
dplyr::group_by(diffs) %>%
dplyr::count()
unique_gaps
unique_gaps
unique_gaps = tibble(
diffs = temp$date %>%
na.omit() %>%
as.numeric() %>%
diff()) %>%
dplyr::group_by(diffs) %>%
dplyr::count() %>%
dplyr::arrange(n)
unique_gaps
unique_gaps = tibble(
diffs = temp$date %>%
na.omit() %>%
as.numeric() %>%
diff()) %>%
dplyr::group_by(diffs) %>%
dplyr::count() %>%
dplyr::arrange(desc(n))
unique_gaps
starting_data = data.frame(
date = c(as.POSIXct("1970-01-01 00:00", format = "%Y-%m-%d %H:%M"),
as.POSIXct("1970-01-01 23:00", format = "%Y-%m-%d %H:%M"))
)
starting_data
devtools::load_all()
usethis::use_description()
devtools::load_all()
use_package("dplyr","requires")
use_package("dplyr","depends")
use_package("dplyr","imports")
?use_package
use_package("dplyr")
test_that("succesful data.frame", {
expect_identical(pad_time_series(.data = starting_data,
period = 3600),
successful_pad)
})
starting_data
starting_data$date %>% class()
dplyr::.data
?dplyr::.data
??dplyr::.data
"POSIXct" %in% class(starting_data$date)
pad_time_series(.data = starting_data,
period = 3600)
devtools::load_all()
pad_time_series(.data = starting_data,
period = 3600)
pad_time_series(starting_data,period = 3600)
"POSIXct" %in% class(starting_data$date)
devtools::load_all()
test_that("succesful data.frame", {
expect_identical(pad_time_series(.data = starting_data,
period = 3600),
successful_pad)
})
test_that("succesful tibble", {
expect_identical(pad_time_series(.data = tibble(starting_data),
period = 3600),
tibble(successful_pad))
})
tibble(starting_data)
tibble(successful_pad)
tibble(starting_data) %>% class()
tibble(successful_pad) %>% class()
pad_time_series(.data = tibble(starting_data),
period = 3600)
pad_time_series(.data = tibble(starting_data),
period = 3600) %>% class()
devtools::load_all()
test_that("succesful tibble", {
expect_identical(pad_time_series(.data = tibble(starting_data),
period = 3600),
tibble(successful_pad))
})
test_that("error no date colum", {
no_date = starting_data
names(no_date) = "timestampe"
expect_error(pad_time_series(.data = starting_data,
period = 3600))
})
test_that("error no date colum", {
no_date = starting_data
names(no_date) = "timestampe"
expect_error(pad_time_series(.data = no_date,
period = 3600))
})
test_that("error not POSIXct", {
not_posixct = starting_data
not_posixct$date = as.numeric(not_posixct$date)
expect_error(pad_time_series(.data = not_posixct,
period = 3600))
})
expect_error(pad_time_series(.data = not_posixct,
period = 3600))
pad_time_series(.data = not_posixct,
period = 3600)
usethis::use_testthat(3)
devtools::test()
pad_time_series(starting_data, .2)
install.packages("covr")
covr::code_coverage()
covr::report()
covr::package_coverage()
covr::package_coverage()
devtools::test_coverage()
devtools::test_coverage()
devtools::load_all()
devtools::test_coverage()
rle(c(1,1,1,1,2,2,2,2,3,3,3,3))
rle(c(1,1,1,1,2,2,2,2,3,3,3,3)) %>% broom::tidy()
use_Test
use_test()
library(usethis)
use_test
use_test()
sequence = c(1,1,1,2,2,3)
input = rle(sequence)
input
devtools::load_all()
tidy_rle(input)
output = tidy_rle(input)
devtools::load_all()
output = tidy_rle(input)
output
rm(input)
test_that("success", {
expect_identical(tidy_rle, output)
})
test_that("success", {
expect_identical(tidy_rle(rle(sequence)), output)
})
use_test()
devtools::load_all()
date_from_decimal_day(1.5, date_origin = "1970-01-01")
date_from_decimal_day(1.5, date_origin = "1970-01-01",tz = "UTC")
date_from_decimal_day = function(decimal_day, date_origin, tz = "UTC") {
doy = floor(decimal_day)
decimal = decimal_day %% 1
seconds = 86400 * decimal
day = as.Date(doy-1, origin = date_origin) %>%
as.POSIXct(tz = tz)
#
day + seconds
}
rm(date_from_decimal_day)
devtools::load_all()
date_from_decimal_day(1.5, date_origin = "1970-01-01")
decimal_day = 1.5
doy = floor(decimal_day)
decimal = decimal_day %% 1
seconds = 86400 * decimal
as.Date(doy-1, origin = date_origin)
date_origin = "1970-01-01"
as.Date(doy-1, origin = date_origin)
day = as.Date(doy-1, origin = date_origin) %>%
as.POSIXct(tz = tz)
day
day = as.Date(doy-1, origin = date_origin) %>%
as.character() %>%
as.POSIXct(tz = tz)
tz = "UTC"
day = as.Date(doy-1, origin = date_origin) %>%
as.character() %>%
as.POSIXct(tz = tz)
day
day = as.Date(doy-1, origin = date_origin) %>%
as.character() %>%
as.POSIXct(tz = tz, format = "%Y-%m-%d")
day
date_from_decimal_day = function(decimal_day, date_origin, tz = "UTC") {
doy = floor(decimal_day)
decimal = decimal_day %% 1
seconds = 86400 * decimal
day = as.Date(doy-1, origin = date_origin) %>%
as.character() %>%
as.POSIXct(tz = tz, format = "%Y-%m-%d")
#
day + seconds
}
test_that("success", {
expect_identical(date_from_decimal_day(1.5, date_origin = "1970-01-01",tz = "UTC"),
as.POSIXct("1970-01-01 12:00",tz = "UTC", format = "%Y-%m-%d %H:%M"))
})
1974/4
1973/4
1975/4
1976/4
date_from_decimal_day(60,date_origin = "1970-01-01")
date_from_decimal_day(90,date_origin = "1970-01-01")
date_from_decimal_day(120,date_origin = "1970-01-01")
date_from_decimal_day(55,date_origin = "1970-01-01")
date_from_decimal_day(56,date_origin = "1970-01-01")
date_from_decimal_day(58,date_origin = "1970-01-01")
date_from_decimal_day(59,date_origin = "1970-01-01")
date_from_decimal_day(60,date_origin = "1970-01-01")
as.POSIXct("1970-02-28", tz = "UTC", format = "%Y-%m-%d")
test_that("success day 60 none leap year", {
expect_identical(date_from_decimal_day(60, date_origin = "1970-01-01", tz = "UTC"),
as.POSIXct("1970-02-28", tz = "UTC", format = "%Y-%m-%d"))
})
test_that("success day 60 none leap year", {
expect_identical(date_from_decimal_day(60, date_origin = "1970-01-01", tz = "UTC"),
as.POSIXct("1970-03-30", tz = "UTC", format = "%Y-%m-%d"))
})
test_that("success day 60 none leap year", {
expect_identical(date_from_decimal_day(60, date_origin = "1970-01-01", tz = "UTC"),
as.POSIXct("1970-03-01", tz = "UTC", format = "%Y-%m-%d"))
})
test_that("success day 60 leap year", {
expect_identical(date_from_decimal_day(60, date_origin = "1972-01-01", tz = "UTC"),
as.POSIXct("1970-02-28", tz = "UTC", format = "%Y-%m-%d"))
})
test_that("success day 60 leap year", {
expect_identical(date_from_decimal_day(60, date_origin = "1972-01-01", tz = "UTC"),
as.POSIXct("1970-02-29", tz = "UTC", format = "%Y-%m-%d"))
})
test_that("success day 60 leap year", {
expect_identical(date_from_decimal_day(60, date_origin = "1972-01-01", tz = "UTC"),
as.POSIXct("1972-02-29", tz = "UTC", format = "%Y-%m-%d"))
})
use_r()
